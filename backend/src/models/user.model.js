import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const userSchema = new mongoose.Schema(
  {
    email: { type: String, required: true, unique: true },
    name: { type: String, required: true },
    password: { type: String, required: true, minLength: 6 },
    profilePicture: { type: String, default: "" },
    bio: { type: String, default: "" },
    friends: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: "User"
    }]
  },
  { timestamps: true }
)

userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();

  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt); //hashed password generated by bcrypt
    next();
  } catch (error) {
    next(error);
  }
});

userSchema.methods.isMatchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password); // returns a boolean => is password valid
};

const UserModel = mongoose.model("User", userSchema);

export default UserModel;